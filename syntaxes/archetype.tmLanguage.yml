# https://github.com/microsoft/TypeScript-TmLanguage/blob/master/TypeScript.YAML-tmLanguage
---
$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: Archetype
scopeName: source.archetype
fileTypes: [arl]

patterns:
- include: "#expression"

repository:
  expression:
    patterns:
    - include: "#identifier"
    - include: "#transfer"
    - include: "#declaration"
    - include: "#comment"
    - include: "#operator"
    - include: "#literal"
    - include: "#type"
    - include: "#control"
    - include: "#builtin"
    - include: "#case"
    - include: "#section"
    - include: "#local"
    - include: "#seq"
    - include: "#emphasis"
    - include: "#constant"
    - include: "#other"

  identifier:
    patterns:
    - match: \%[a-zA-Z][a-zA-Z0-9_]*
      name: variable.other
  transfer:
    patterns:
    - begin: \b(transfer)\b
      beginCaptures:
        '1': { name: entity.name.function }
      end: \b(to entry|to)\b
      endCaptures:
        '1': { name: entity.name.function }
      patterns:
      - include: '#expression'
  constant:
    patterns:
    - match: \b(self_chain_id|now|balance|transferred|self|caller|source|self_address|state|operations|metadata)\b
      captures:
        '1': { name: constant.language.boolean }
  operator:
    patterns:
    - match: <|>|<=|>=|<>|=|<=>|\|>>|\|<<
      name: keyword.operator.comparison
    - match: \+|\-|\*|,|\[|\]|/|/%|&
      name: keyword.operator.arithmetic
    - match: \b(div)\b
      name: keyword.operator.arithmetic
    - match: \b(and|or|not|xor|\->)\b
      name: keyword.operator.boolean
    - match: \,|\[|\]|/|&
      name: keyword.operator.arithmetic
    - match: ':'
      name: keyword.operator.type
  emphasis:
    patterns:
    - match: \b(do_require|fail_some|do_fail_if|fail)\b
      name: 'entity.name.tag'
    - match: \b[A-Z][0-9A-Z_]*\b
      name: 'entity.name.tag'
  section:
    patterns:
    - match: \b(called\s+by|sourced\s+by|effect|with\s+effect|no\s+transfer|constant|require|fail\s+if|otherwise|is|when|identified\s+by|initialized\s+by)\b
      captures:
        '1': { name: storage.modifier }
    - begin: \b(from)\b
      beginCaptures:
        '1': { name: storage.modifier }
      end: \b(to)\b
      endCaptures:
        '1': { name: storage.modifier }
      patterns:
      - include: '#expression'
  seq:
    patterns:
    - begin: \b(begin)\b
      beginCaptures:
        '1': { name: punctuation.definition.block }
      end: \b(end)\b
      endCaptures:
        '1': { name: punctuation.definition.block }
      patterns:
      - include: "#expression"
  local:
    patterns:
    - match: \b(var|const)\b
      name: storage.type
    - begin: \b(let\s+some|let)\b
      beginCaptures:
        '1': { name: storage.type }
      end: \b(in)\b
      endCaptures:
        '1': { name: storage.type }
      patterns:
      - include: '#expression'
  control:
    patterns:
    - match: \b(return|if|then|else|exists)\b
      name: keyword.control
    - match: \bmatch\b
      name: keyword.control
    - begin: \b(with)\b
      beginCaptures:
        '1': { name : keyword.control }
      end: \b(end)\b
      endCaptures:
        '1': { name : keyword.control }
      patterns:
      - include: "#expression"
    - begin: \b(do)\b
      beginCaptures:
        '1': { name : keyword.control }
      end: \b(done)\b
      endCaptures:
        '1': { name : keyword.control }
      patterns:
      - include: "#expression"
    - begin: \b(for|forall)\b
      beginCaptures:
        '1': { name : keyword.control }
      end: \b(in)\b
      endCaptures:
        '1': { name : keyword.control }
      patterns:
      - include: "#expression"
  case:
    patterns:
    - match: (\|)\s+
      name: keyword.control
  builtin:
    patterns:
    - begin: \b(call_view|get_entrypoint|left|make_asset|make_set|make_list|make_map|none|right|unpack)\s*(<)
      beginCaptures:
        '1': { name: entity.name.function }
        '2': { name: keyword.control }
      end: \s*(>)
      endCaptures:
        '1': { name: keyword.control }
      patterns:
      - include: '#type'
    - name: entity.name.function
      match: \b(to_container|call|remove_all|remove_if|clear|nth|sort|select|update|add_update|update_all|put_remove|remove|the|abs|add|address_to_contract|apply_lambda|blake2b|call_view|ceil|check_signature|concat|contains|contract_to_address|create_ticket|exec_lambda|floor|fold|get_entrypoint|greedy_and|greedy_or|int_to_date|int_to_nat|is_none|is_some|join_tickets|keccak|key_hash_to_contract|key_to_address|key_to_key_hash|left|length|make_big_map|make_list|make_map|make_operation|make_set|map|max|min|mutez_to_nat|nat_to_string|none|nth|open_chest|pack|pairing_check|prepend|put|read_ticket|remove|reverse|right|sapling_empty_state|sapling_verify_update|set_delegate|sha256|sha3|sha512|slice|some|split_ticket|sub_mutez|sub_nat|unpack|update|voting_power|create_contract)\b
  declaration:
    patterns:
    - match: \b(archetype)\s+([a-z][a-zA-z0-9_]*)?
      captures:
        '1': { name: keyword.control }
    - match: \b(import)\s+([a-z][a-zA-z0-9_]*)?\s+(from)
      captures:
        '1': { name: keyword.control }
        '3': { name: keyword.control }
    - match: \bwith\s+metadata\b
      name: keyword.control
    - match: \b(constant|variable|entry|getter|view|function|asset|to\s+big_map|transition|specification\s+(entry|getter|transition)|specification|definition|predicate|shadow\s+effect|assert|postcondition|fails|invariant\s+for)\b\s*([a-zA-Z][a-zA-z0-9_]*)?
      captures:
        '1': { name: storage.type.function }
    - match: \b(enum|record|states|event)\b\s*([a-zA-Z][a-zA-z0-9_]*)?
      captures:
        '1': { name: storage.type.class }
    - match: \binitial\b
      name: storage.type.other
  type:
    patterns:
    - begin: \b(aggregate|asset_key|asset_value|asset_view|asset_container|big_map|contract|iterable_big_map|lambda|list|map|option|or|partition|set)\b\s*(<)
      beginCaptures:
        '1': { name: support.type }
        '2': { name: keyword }
      end: \s?(>)
      endCaptures:
        '1': { name: keyword }
      patterns:
      - include: '#type'
      - match: (\*)
        captures:
          '1': { name: keyword }
    - match: \b(address|bls12_381_fr|bls12_381_g1|bls12_381_g2|bool|bytes|chain_id|chest|chest_key|date|duration|int|key|key_hash|nat|never|operation|rational|sapling_state|sapling_transaction|signature|string|tez|ticket|unit)\b
      captures:
        '1': { name: support.type }
    - match: (\*)
      captures:
        '1': { name: keyword }
  comment:
    patterns:
    - name: comment.block.slash
      begin: \(\*
      end: \*\)
    - name: comment.block.parenthese
      begin: /\*
      end: \*/
    - name: comment.line.slash
      begin: //
      end: \n
  literal:
    patterns:
    - name: string.quoted.double.archetype
      begin: '"'
      end: '"'
      patterns:
      - name: constant.character.escape.archetype
        match: \\.
    - name: constant.numeric.rational.archetype
      match: \b(\d+ div \d+)\b
    - name: constant.numeric.currency.tz.archetype
      match: \b(\d+(\.\d+)?tz)\b
    - name: constant.numeric.currency.mtz.archetype
      match: \b(\d+(\.\d+)?mtz)\b
    - name: constant.numeric.currency.utz.archetype
      match: \b(\d+(\.\d+)?utz)\b
    - name: constant.numeric.rational.percent.archetype
      match: \d+(\.\d+)?%
    - name: constant.numeric.rational.decimal.archetype
      match: \b(\d+\.\d+)\b
    - name: constant.language.boolean
      match: \b(\d+[wdhms])+\b
    - name: constant.language.address.archetype
      match: \b@?((tz(1|2|3))|KT1)[0-9a-zA-Z]{33}\b
    - name: constant.language.bytes.archetype
      match: 0x([0-9a-fA-F]+)
    - name: constant.numeric.number.archetype
      match: \b\d+(i?)\b
    - name: constant.numeric.int.archetype
      match: \b\d\d?\d?(_\d\d\d)+i\b
    - name: constant.numeric.nat.archetype
      match: \b\d\d?\d?(_\d\d\d)+\b
    - name: constant.language.boolean
      match: \b([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\\d|2[0-3]):?([0-5]\d)?)?)?)?\b
    - name: constant.language.boolean
      match: \b(true|false)\b
    - name: constant.language.boolean
      match: \bUnit\b
