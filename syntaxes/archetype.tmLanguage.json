{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Archetype",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#declarations"
		},
		{
		    "include": "#description"
		},
		{
			"include": "#type"
		},
		{
		    "include": "#operator"
		},
		{
		    "include": "#control"
		},
		{
			"include": "#global"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#literal"
		}
	],
	"repository": {
		"comment": {
			"name": "comment.language.archetype",
			"begin": "\\(\\*",
			"end": "\\*\\)",
			"patterns": [
				{
					"name": "constant.character.escape.archetype",
					"match": "wordPattern"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"include": "#declaration-archetype"
				},
				{
					"include": "#declaration-variable"
				},
				{
					"include": "#declaration-enum"
				},
				{
					"include": "#declaration-states"
				},
				{
					"include": "#declaration-asset"
				},
				{
					"include": "#declaration-action"
				},
				{
					"include": "#declaration-transition"
				},
				{
					"include": "#declaration-contract"
				},
				{
					"include": "#declaration-extension"
				},
				{
					"include": "#declaration-namespace"
				},
				{
					"include": "#declaration-function"
				},
				{
					"include": "#declaration-verification"
				},
				{
					"include": "#declaration-predicate"
				},
				{
					"include": "#declaration-definition"
				},
				{
					"include": "#declaration-axiom"
				},
				{
					"include": "#declaration-theorem"
				},
				{
					"include": "#declaration-invariant"
				},
				{
					"include": "#declaration-specification"
				}
			]
		},
		"declaration-archetype": {
			"patterns": [
				{
					"match": "\\b(archetype)(\\[\\%(.)+\\])?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.archetype.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.archetype.archetype"
						}
					}
				}
			]
		},
		"declaration-variable": {
			"patterns": [
				{
					"match": "\\b(variable|constant)(\\[\\%(.)+\\])?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.variable.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.variable.archetype"
						}
					}
				}
			]
		},
		"declaration-enum": {
			"patterns": [
				{
					"match": "\\b(enum)(\\[\\%(.)+\\])?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.enum.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.enum.archetype"
						}
					}
				}
			]
		},
		"declaration-states": {
			"patterns": [
				{
					"match": "\\b(states)(\\[\\%(.)+\\])?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.states.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.states.archetype"
						}
					}
				}
			]
		},
		"declaration-asset": {
			"patterns": [
				{
					"match": "\\b(asset)(\\[\\%(.)+\\])?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.asset.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.asset.archetype"
						}
					}
				}
			]
		},
		"declaration-action": {
			"patterns": [
				{
					"match": "\\b(action)(\\[\\%(.)+\\])?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.action.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.action.archetype"
						}
					}
				}
			]
		},
		"declaration-transition": {
			"patterns": [
				{
					"match": "\\b(transition)(\\[\\%(.)+\\])?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.transition.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.transition.archetype"
						}
					}
				}
			]
		},
		"declaration-contract": {
			"patterns": [
				{
					"match": "\\b(contract)(\\[\\%(.)+\\])?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.contract.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.contract.archetype"
						}
					}
				}
			]
		},
		"declaration-extension": {
			"patterns": [
				{
					"match": "^%\\\\\\.$\\b"
				}
			]
		},
		"declaration-namespace": {
			"patterns": [
				{
					"match": "\\b(namespace)\\b"
				}
			]
		},
		"declaration-function": {
			"patterns": [
				{
					"match": "\\b(function)(\\[\\%(.)+\\])?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.function.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.function.archetype"
						}
					}
				}
			]
		},
		"declaration-verification": {
			"patterns": [
				{
					"match": "\\b(verification)(\\[\\%(.)+\\])?\\b",
					"name": "storage.type.verification.archetype"
				}
			]
		},
		"declaration-predicate": {
			"patterns": [
				{
					"match": "\\b(predicate)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.predicate.archetype"
						},
						"3": {
							"name": "entity.name.type.predicate.archetype"
						}
					}
				}
			]
		},
		"declaration-definition": {
			"patterns": [
				{
					"match": "\\b(definition)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.definition.archetype"
						},
						"3": {
							"name": "entity.name.type.definition.archetype"
						}
					}
				}
			]
		},
		"declaration-axiom": {
			"patterns": [
				{
					"match": "\\b(axiom)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.axiom.archetype"
						},
						"3": {
							"name": "entity.name.type.axiom.archetype"
						}
					}
				}
			]
		},
		"declaration-theorem": {
			"patterns": [
				{
					"match": "\\b(theorem)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.theorem.archetype"
						},
						"3": {
							"name": "entity.name.type.theorem.archetype"
						}
					}
				}
			]
		},
		"declaration-invariant": {
			"patterns": [
				{
					"match": "\\b(invariant)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.invariant.archetype"
						},
						"3": {
							"name": "entity.name.type.invariant.archetype"
						}
					}
				}
			]
		},
		"declaration-specification": {
			"patterns": [
				{
					"match": "\\b(specification)\\b",
					"captures": {
						"1": {
							"name": "storage.type.specification.archetype"
						},
						"3": {
							"name": "entity.name.type.specification.archetype"
						}
					}
				}
			]
		},
		"type": {
			"patterns": [
				{
					"include": "#type-primitive"
				}
			]
		},
		"type-primitive": {
			"patterns": [
				{
					"match": "\\b(bool|int|uint|rational|date|duration|string|address|role|tez|mtez|object|key)\\b",
					"name": "support.type.primitive.archetype"
				}
			]
		},
		"global": {
			"patterns": [
				{
					"include": "#global-variables"
				},
				{
					"include": "#global-functions"
				}
			]
		},
		"global-variables": {
			"patterns": [
				{
					"match": "\\b(state|now|transferred|caller|balance|conditions|effects|none|any|transfer|mem|idem|before|after|fixed|subset|default|type)\\b",
					"name": "variable.language.global.archetype"
				}
			]
		},
		"global-functions": {
			"patterns": [
				{
					"match": "\\b(assert|fail)\\b",
					"name": "keyword.control.exceptions.archetype"
				},
				{
					"match": "\\b(nth|clear|select|removeif|sort|count|sum|max|min|enqueue|dequeue|push|pop|add|addifnotexist|remove|get|contains|update|mem)\\b",
					"name": "support.function.asset_function.archetype"
				}
			]
		},
		"operator": {
            "patterns": [
                {
                    "match": "(and|or|not|\\->)",
             		"name": "keyword.operator.logic.archetype"
                },
                {
                    "match": "(=|<>|>=|>|<|<=)",
             		"name": "keyword.operator.comparison.archetype"
                },
                {
					"match": "(\\+|\\-|\\*|\\/|\\%)",
					"name": "keyword.operator.arithmetic.archetype"
                },
                {
					"match": "(forall|exists)(\\s+([A-Za-z_]\\w*))",
					"captures": {
						"1": {
							"name": "keyword.control.quantifier.archetype"
						},
						"2": {
							"name": "entity.name.id_quantifier.archetype"
						}
					}
                },
                {
					"match": "(\\:=|\\+=|\\-=|\\*=|\\/=|\\&=|\\|=)",
					"name": "keyword.operator.assignment.archetype"
                }
            ]
        },
		"punctuation": {
			"patterns": [
				{
					"match": ";",
					"name": "punctuation.separator.archetype"
				}
			]
		},
		"description": {
			"patterns": [
				{
					"match": "\\b(from)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.from.archetype"
						},
						"3": {
							"name": "entity.name.from.archetype"
						}
					}
				},
				{
					"match": "\\b(to)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.to.archetype"
						},
						"3": {
							"name": "entity.name.to.archetype"
						}
					}
				},
				{
					"match": "\\b(as)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "markup.heading.as.archetype"
						},
						"3": {
							"name": "entity.name.as.archetype"
						}
					}
				},
				{
					"match": "\\b(on)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "markup.heading.on.archetype"
						},
						"3": {
							"name": "entity.name.on.archetype"
						}
					}
				},
				{
					"match": "\\b(identified(\\s+)by)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "markup.heading.identifiedby.archetype"
						},
						"2": {
							"name": "entity.name.id.archetype"
						}
					}
				},
				{
					"match": "\\b(with\\s+)?(effect)\\b",
					"name": "markup.heading.effect.archetype"
				},
				{
					"match": "(called)(\\s+)(by)",
					"name": "markup.heading.calledby.archetype"
				},
				{
					"match": "\\b(condition|when)\\b",
					"captures": {
						"1": {
							"name": "markup.heading.condition.archetype"
						}
					}
				},
				{
					"match": "\\b(initialized(\\s+)by)\\b",
					"name": "markup.heading.initializedby.archetype"
				},
				{
					"match": "\\b(with(\\s+)states)\\b",
					"name": "markup.heading.withstates.archetype"
				},
				{
					"match": "\\b(with)\\b",
					"name": "markup.heading.with.archetype"
				},
				{
					"match": "\\b(initial)\\b",
					"name": "markup.heading.initial.archetype"
				}
			]
		},
		"control": {
			"patterns": [
				{
					"match": "\\b(let)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.let.archetype"
						},
						"3": {
							"name": "variable.other.definition.archetype"
						}
					}
				},
				{
					"match": "\\b(match)(.)+(with)\\b",
					"captures": {
						"1": {
							"name": "keyword.control.match.archetype"
						},
						"3": {
							"name": "keyword.control.with.archetype"
						}

					}
				},
				{
					"match": "(([A-Za-z0-9_]\\w*)\\s+\\:\\s+)",
					"name": "markup.bold.label.archetype"
				},
				{
					"match": "\\b(if|then|else|for|in|break|otherwise|transfer|to|end?)\\b",
					"name": "keyword.control.flow.archetype"
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"name": "string.quoted.double.archetype",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.archetype",
							"match": "\\\\."
						}
					]
				},
				{
					"match": "\\b(\\d+ div \\d+)\\b",
					"name": "constant.numeric.rational.archetype"
				},
				{
					"match": "\\b(\\d+(\\.\\d+)?tz)\\b",
					"name": "constant.language.currency.archetype"
				},
				{
					"match": "\\b(\\d+\\.\\d+)\\b",
       			    "name": "constant.numeric.rational.decimal.archetype"
				},
				{
					"match": "\\b\\d+Y\\b",
			  		"name": "constant.language.duration.archetype"
				},
				{
					"match": "@(\\w+)",
	       			"name": "constant.language.address.archetype"
				},
				{
					"match": "\\b([\\+-]?\\d{4}(?!\\d{2}\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?\\b",
					"name": "constant.language.date.archetype"
				},
				{
					"match": "\\b\\d+\\b",
	       			"name": "constant.numeric.number.archetype"
				},
				{
					"match": "\\b(true|false)\\b",
			  		"name": "constant.language.bool.archetype"
				}
			]
		}
	},
	"scopeName": "source.archetype"
}