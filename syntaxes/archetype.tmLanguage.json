{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Archetype",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#control0"
		},
		{
			"include": "#declarations"
		},
		{
			"include": "#description"
		},
		{
			"include": "#type"
		},
		{
			"include": "#operator"
		},
		{
			"include": "#control"
		},
		{
			"include": "#global"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#literal"
		}
	],
	"repository": {
		"comment": {
			"patterns": [
				{
					"begin": "\\(\\*",
					"end": "\\*\\)",
					"name": "comment.block.slash.language.archetype"
				},
				{
					"begin": "/\\*",
					"end": "\\*/",
					"name": "comment.block.parenthese.language.archetype"
				},
				{
					"begin": "//",
					"end": "\\n",
					"name": "comment.line.slash.language.archetype"
				}
			]
		},
		"control0": {
			"patterns": [
				{
					"match": "\\b(for)(\\s*\\:\\s*([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.for.archetype"
						},
						"2": {
							"name": "entity.other.attribute-name.for_label.archetype"
						}
					}
				},
				{
					"match": "\\b(iter)(\\s*\\:\\s*([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.iter.archetype"
						},
						"2": {
							"name": "entity.other.attribute-name.iter_label.archetype"
						}
					}
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"include": "#declaration-archetype"
				},
				{
					"include": "#declaration-variable"
				},
				{
					"include": "#declaration-instance"
				},
				{
					"include": "#declaration-enum"
				},
				{
					"include": "#declaration-states"
				},
				{
					"include": "#declaration-use"
				},
				{
					"include": "#declaration-asset"
				},
				{
					"include": "#declaration-record"
				},
				{
					"include": "#declaration-entry"
				},
				{
					"include": "#declaration-transition"
				},
				{
					"include": "#declaration-entries"
				},
				{
					"include": "#declaration-extension"
				},
				{
					"include": "#declaration-namespace"
				},
				{
					"include": "#declaration-function"
				},
				{
					"include": "#declaration-specification"
				},
				{
					"include": "#declaration-security"
				},
				{
					"include": "#declaration-predicate"
				},
				{
					"include": "#declaration-definition"
				},
				{
					"include": "#declaration-lemma"
				},
				{
					"include": "#declaration-theorem"
				},
				{
					"include": "#declaration-invariant"
				},
				{
					"include": "#declaration-assert"
				},
				{
					"include": "#declaration-postcondition"
				},
				{
					"include": "#declaration-doc-comment"
				},
				{
					"include": "#declaration-label"
				}
			]
		},
		"declaration-archetype": {
			"patterns": [
				{
					"match": "\\b(archetype)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.archetype.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.archetype.archetype"
						}
					}
				}
			]
		},
		"declaration-variable": {
			"patterns": [
				{
					"match": "\\b(variable|constant)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.variable.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.variable.archetype"
						}
					}
				}
			]
		},
		"declaration-instance": {
			"patterns": [
				{
					"match": "\\b(instance)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))(\\s+of)\\s+(([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.instance.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"5": {
							"name": "entity.name.type.instance.archetype"
						},
						"6": {
							"name": "keyword.control.of.archetype"
						},
						"7": {
							"name": "entity.name.contract.archetype"
						}
					}
				}
			]
		},
		"declaration-enum": {
			"patterns": [
				{
					"match": "\\b(enum)(\\[\\%(.)+\\%\\])?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.enum.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.enum.archetype"
						}
					}
				}
			]
		},
		"declaration-states": {
			"patterns": [
				{
					"match": "\\b(states)(\\[\\%(.)+\\%\\])?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.states.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.states.archetype"
						}
					}
				}
			]
		},
		"declaration-asset": {
			"patterns": [
				{
					"match": "\\b(asset)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.underline.asset.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.type.asset.archetype"
						}
					}
				},
				{
					"match": "([A-Za-z_]\\w*)\\s*(\\[\\%(.)+\\%\\])?\\s*\\:;",
					"captures": {
						"1": {
							"name": "entity.other.attribute-name.field.name"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "storage.type.asset.type"
						}
					}
				}
			]
		},
		"declaration-record": {
			"patterns": [
				{
					"match": "\\b(record)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.underline.record.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.type.record.archetype"
						}
					}
				},
				{
					"match": "([A-Za-z_]\\w*)\\s*(\\[\\%(.)+\\%\\])?\\s*\\:;",
					"captures": {
						"1": {
							"name": "entity.other.attribute-name.field.name"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "storage.type.asset.type"
						}
					}
				}
			]
		},
		"declaration-entry": {
			"patterns": [
				{
					"match": "\\b(entry)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.entry.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.entry.archetype"
						}
					}
				}
			]
		},
		"declaration-transition": {
			"patterns": [
				{
					"match": "\\b(transition)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.transition.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.type.transition.archetype"
						}
					}
				}
			]
		},
		"declaration-entries": {
			"patterns": [
				{
					"match": "\\b(entries)(\\[\\%(.)+\\%\\])?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.entries.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						}
					}
				}
			]
		},
		"declaration-extension": {
			"patterns": [
				{
					"match": "^%\\\\\\.$\\b"
				}
			]
		},
		"declaration-namespace": {
			"patterns": [
				{
					"match": "\\b(namespace)\\b"
				}
			]
		},
		"declaration-function": {
			"patterns": [
				{
					"match": "\\b(function)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.function.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.type.function.archetype"
						}
					}
				},
				{
					"match": "\\(([A-Za-z_]\\w*)\\s*(\\[\\%(.)+\\%\\])?\\s*\\:\\s*(\\s+([A-Za-z_]\\w*))\\)",
					"captures": {
						"1": {
							"name": "entity.name.argument.name"
						},
						"2": {
							"name": "entity.name.type.extension.archetype"
						},
						"4": {
							"name": "storage.type.argument.type"
						}
					}
				}
			]
		},
		"declaration-specification": {
			"patterns": [
				{
					"match": "\\b(specification)(\\[\\%(.)+\\%\\])?\\b",
					"name": "markup.heading.specification.archetype"
				}
			]
		},
		"declaration-security": {
			"patterns": [
				{
					"match": "\\b(security)(\\[\\%(.)+\\%\\])?\\b",
					"name": "markup.heading.security.archetype"
				}
			]
		},
		"declaration-predicate": {
			"patterns": [
				{
					"match": "\\b(predicate)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.predicate.archetype"
						},
						"3": {
							"name": "entity.name.type.predicate.archetype"
						}
					}
				}
			]
		},
		"declaration-definition": {
			"patterns": [
				{
					"match": "\\b(definition)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.definition.archetype"
						},
						"3": {
							"name": "entity.name.type.definition.archetype"
						}
					}
				}
			]
		},
		"declaration-lemma": {
			"patterns": [
				{
					"match": "\\b(lemma)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.lemma.archetype"
						},
						"3": {
							"name": "entity.name.type.lemma.archetype"
						}
					}
				}
			]
		},
		"declaration-theorem": {
			"patterns": [
				{
					"match": "\\b(theorem)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.theorem.archetype"
						},
						"3": {
							"name": "entity.name.type.theorem.archetype"
						}
					}
				}
			]
		},
		"declaration-invariant": {
			"patterns": [
				{
					"match": "\\b(invariant)\\s+(for)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.invariant.archetype"
						},
						"2": {
							"name": "storage.type.invariant.archetype"
						},
						"3": {
							"name": "entity.name.type.invariant.archetype"
						}
					}
				}
			]
		},
		"declaration-assert": {
			"patterns": [
				{
					"match": "\\b(assert)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.assert.archetype"
						},
						"3": {
							"name": "entity.name.type.assert.archetype"
						},
						"5": {
							"name": "storage.type.at.archetype"
						},
						"7": {
							"name": "entity.name.type.at.archetype"
						}
					}
				}
			]
		},
		"declaration-postcondition": {
			"patterns": [
				{
					"match": "\\b(postcondition)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.postcondition.archetype"
						},
						"3": {
							"name": "entity.name.type.postcondition.archetype"
						}
					}
				}
			]
		},
		"declaration-use": {
			"patterns": [
				{
					"match": "\\b(use)(\\s*\\:)((\\s*[A-Za-z_]\\w*)+)\\b",
					"captures": {
						"1": {
							"name": "storage.type.use.keywod"
						},
						"3": {
							"name": "entity.name.type.use.label"
						}
					}
				}
			]
		},
		"declaration-doc-comment": {
			"patterns": [
				{
					"name": "comment.block.documentation.archetype",
					"begin": "doc\\*",
					"end": "\\*doc"
				}
			]
		},
		"declaration-label": {
			"patterns": [
				{
					"match": "\\b(label)(\\s*)((\\s*[A-Za-z_]\\w*)+)\\b",
					"captures": {
						"1": {
							"name": "keyword.control.label.archetype"
						},
						"3": {
							"name": "entity.name.label.label"
						}
					}
				}
			]
		},
		"type": {
			"patterns": [
				{
					"include": "#type-primitive"
				},
				{
					"include": "#type-composite"
				}
			]
		},
		"type-primitive": {
			"patterns": [
				{
					"match": "\\b(bool|nat|int|rational|date|duration|string|address|role|tez|key|bytes|chain_id|unit|operation)\\b",
					"name": "storage.type.primitive.archetype"
				}
			]
		},
		"type-composite": {
			"patterns": [
				{
					"match": "\\b(set|list|map|option|pkey|entrysig|aggregate|partition)\\b",
					"name": "storage.type.composite.archetype"
				}
			]
		},
		"type-composite_gen": {
			"patterns": [
				{
					"begin": "<",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.angle.archetype"
						}
					},
					"end": ">",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.angle.archetype"
						}
					},
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"global": {
			"patterns": [
				{
					"include": "#global-variables"
				},
				{
					"include": "#global-functions"
				}
			]
		},
		"global-variables": {
			"patterns": [
				{
					"match": "\\b(the|state|now|transferred|caller|balance|source|requires|none|any|transfer|idem|before|at|unmoved|added|removed|toiterate|iterated|after|fixed|default|type|chainid|operations)\\b",
					"name": "variable.language.global.archetype"
				}
			]
		},
		"global-functions": {
			"patterns": [
				{
					"match": "\\b(fail)\\b",
					"name": "keyword.control.exceptions.archetype"
				},
  			{
					"match": "\\b(add|remove|removeall|removeif|update|addupdate|clear)\\b",
					"name": "support.function.asset_method_effect.archetype"
				},
				{
					"match": "\\b(select|sort|contains|nth|count|sum|head|tail)\\b",
					"name": "support.function.asset_function.archetype"
				},
				{
					"match": "\\b(union|inter|diff|isempty|empty|singleton)\\b",
					"name": "support.function.asset_formula_function.archetype"
				},
				{
					"match": "\\b(min|max|abs|concat|slice|length|isnone|issome|getopt|floor|ceil|pack|unpack)\\b",
					"name": "support.function.builtin_function.archetype"
				},
				{
					"match": "\\b(entrypoint|mktransaction)\\b",
					"name": "support.function.utils_function.archetype"
				},
				{
					"match": "\\b(prepend)\\b",
					"name": "support.function.list_function.archetype"
				},
				{
					"match": "\\b(set_add|set_remove|set_contains|set_length)\\b",
					"name": "support.function.set_function.archetype"
				},
				{
					"match": "\\b(map_put|map_remove|map_getopt|map_contains|map_length)\\b",
					"name": "support.function.map_function.archetype"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"match": "\\b(only_by_role|only_in_entry|only_by_role_in_entry|not_by_role|not_in_entry|not_by_role_in_entry|transferred_by|transferred_to|no_storage_fail)\\b",
					"name": "keyword.control.security.archetype"
				},
				{
					"match": "\\b(anyentry|noentry|anychange|nochange)\\b",
					"name": "constant.language.security.archetype"
				},
				{
					"match": "\\b(and|or|not)\\b|(\\->)",
					"name": "keyword.control.logic.archetype"
				},
				{
					"match": "(=|<>|>=|>|<|<=)",
					"name": "keyword.operator.comparison.archetype"
				},
				{
					"match": "(\\+|\\-|\\*|\\/|\\%)",
					"name": "keyword.operator.arithmetic.archetype"
				},
				{
					"match": "(forall|exists)(\\s+([A-Za-z_]\\w*))",
					"captures": {
						"1": {
							"name": "keyword.control.quantifier.archetype"
						},
						"2": {
							"name": "entity.name.id_quantifier.archetype"
						}
					}
				},
				{
					"match": "(\\:=|\\+=|\\-=|\\*=|\\/=|\\&=|\\|=)",
					"name": "keyword.operator.assignment.archetype"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"match": ";",
					"name": "punctuation.separator.archetype"
				}
			]
		},
		"description": {
			"patterns": [
				{
					"match": "\\b(from)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.from.archetype"
						},
						"3": {
							"name": "entity.name.from.archetype"
						}
					}
				},
				{
					"match": "\\b(to)(\\s+entry)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.to.archetype"
						},
						"2": {
							"name": "keyword.control.entry.archetype"
						},
						"4": {
							"name": "entity.name.to.archetype"
						}
					}
				},
				{
					"match": "\\b(to)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.to.archetype"
						},
						"3": {
							"name": "entity.name.to.archetype"
						}
					}
				},
				{
					"match": "\\b(on)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "markup.heading.on.archetype"
						},
						"3": {
							"name": "entity.name.on.archetype"
						}
					}
				},
				{
					"match": "\\b(identified(\\s+)by)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.identifiedby.archetype"
						},
						"2": {
							"name": "entity.name.id.archetype"
						}
					}
				},
				{
					"match": "\\b(sorted(\\s+)by)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.sortedby.archetype"
						},
						"2": {
							"name": "entity.name.id.archetype"
						}
					}
				},
				{
					"match": "\\b(with\\s+)?(effect)\\b",
					"name": "markup.heading.effect.archetype"
				},
				{
					"match": "((called)(\\s*)(by))\\s*(\\[\\%\\w+\\%\\])?",
					"captures": {
						"1": {
							"name": "markup.heading.calledby.archetype"
						},
						"5": {
							"name": "markup.underline.extension.archetype"
						}
					}
				},
				{
					"match": "(accept)(\\s+)(transfer)",
					"name": "markup.heading.accepttransfer.archetype"
				},
				{
					"match": "(refuse)(\\s+)(transfer)",
					"name": "markup.heading.refusetransfer.archetype"
				},
				{
					"match": "\\b(when)\\b",
					"captures": {
						"1": {
							"name": "markup.heading.when.archetype"
						}
					}
				},
				{
					"match": "(require)\\s+\\{",
					"captures": {
						"1": {
							"name": "markup.heading.require.archetype"
						}
					}
				},
				{
					"match": "(failif)\\s+\\{",
					"captures": {
						"1": {
							"name": "markup.heading.failif.archetype"
						}
					}
				},
				{
					"match": "\\b(assert)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.assert.archetype"
						},
						"3": {
							"name": "entity.name.type.assert.archetype"
						}
					}
				},
				{
					"match": "\\b(shadow)\\b",
					"name": "markup.heading.shadow.archetype"
				},
				{
					"match": "\\b(initialized(\\s+)by)\\b",
					"name": "markup.heading.initializedby.archetype"
				},
				{
					"match": "\\b(with(\\s+)states)\\b",
					"name": "markup.heading.withstates.archetype"
				},
				{
					"match": "\\b(with)\\b",
					"name": "markup.heading.with.archetype"
				},
				{
					"match": "\\b(initial)\\b",
					"name": "keyword.control.initial.archetype"
				}
			]
		},
		"control": {
			"patterns": [
				{
					"match": "\\b(let)(\\s+some)?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.let.archetype"
						},
						"2": {
							"name": "keyword.control.some.archetype"
						},
						"4": {
							"name": "variable.other.definition.archetype"
						}
					}
				},
				{
					"match": "\\b(var)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.var.archetype"
						},
						"3": {
							"name": "variable.other.definition.archetype"
						}
					}
				},
				{
					"match": "\\b(match)(.)+(with)\\b",
					"captures": {
						"1": {
							"name": "keyword.control.match.archetype"
						},
						"3": {
							"name": "keyword.control.with.archetype"
						}
					}
				},
				{
					"match": "(([A-Za-z0-9_]\\w*)\\s*\\:\\s+)",
					"name": "entity.name.type.label.archetype"
				},
				{
					"match": "\\b(if|then|else|in|break|otherwise|transfer|call|dorequire|dofailif|to|from|end|return|do|done?)\\b",
					"name": "keyword.control.flow.archetype"
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"name": "string.quoted.double.archetype",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.archetype",
							"match": "\\\\."
						}
					]
				},
				{
					"match": "\\b(\\d+ div \\d+)\\b",
					"name": "constant.numeric.rational.archetype"
				},
				{
					"match": "\\b(\\d+(\\.\\d+)?tz)\\b",
					"name": "constant.language.currency.tz.archetype"
				},
				{
					"match": "\\b(\\d+(\\.\\d+)?mtz)\\b",
					"name": "constant.language.currency.mtz.archetype"
				},
				{
					"match": "\\b(\\d+(\\.\\d+)?utz)\\b",
					"name": "constant.language.currency.utz.archetype"
				},
				{
					"match": "\\b(\\d+\\.\\d+)\\b",
					"name": "constant.numeric.rational.decimal.archetype"
				},
				{
					"match": "\\d+%",
					"name": "constant.numeric.rational.percent.archetype"
				},
				{
					"match": "\\b(\\d+[wdhms])+\\b",
					"name": "constant.language.duration.archetype"
				},
				{
					"match": "@(\\w+)",
					"name": "constant.language.address.archetype"
				},
				{
					"match": "0x([0-9a-fA-F]+)",
					"name": "constant.language.bytes.archetype"
				},
				{
					"match": "\\b([\\+-]?\\d{4}(?!\\d{2}\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?\\b",
					"name": "constant.language.date.archetype"
				},
				{
					"match": "\\b\\d+\\b",
					"name": "constant.numeric.number.archetype"
				},
				{
					"match": "\\b(true|false)\\b",
					"name": "constant.language.bool.archetype"
				}
			]
		}
	},
	"scopeName": "source.archetype"
}