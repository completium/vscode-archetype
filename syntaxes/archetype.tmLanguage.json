{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Archetype",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#declarations"
		},
		{
			"include": "#description"
		},
		{
			"include": "#type"
		},
		{
			"include": "#operator"
		},
		{
			"include": "#control"
		},
		{
			"include": "#global"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#literal"
		}
	],
	"repository": {
		"comment": {
			"name": "comment.language.archetype",
			"begin": "\\(\\*",
			"end": "\\*\\)",
			"patterns": [
				{
					"name": "constant.character.escape.archetype",
					"match": "wordPattern"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"include": "#declaration-archetype"
				},
				{
					"include": "#declaration-variable"
				},
				{
					"include": "#declaration-instance"
				},
				{
					"include": "#declaration-enum"
				},
				{
					"include": "#declaration-states"
				},
				{
					"include": "#declaration-asset"
				},
				{
					"include": "#declaration-action"
				},
				{
					"include": "#declaration-transition"
				},
				{
					"include": "#declaration-contract"
				},
				{
					"include": "#declaration-extension"
				},
				{
					"include": "#declaration-namespace"
				},
				{
					"include": "#declaration-function"
				},
				{
					"include": "#declaration-specification"
				},
				{
					"include": "#declaration-security"
				},
				{
					"include": "#declaration-predicate"
				},
				{
					"include": "#declaration-definition"
				},
				{
					"include": "#declaration-lemma"
				},
				{
					"include": "#declaration-theorem"
				},
				{
					"include": "#declaration-invariant"
				},
				{
					"include": "#declaration-assert"
				},
				{
					"include": "#declaration-postcondition"
				}
			]
		},
		"declaration-archetype": {
			"patterns": [
				{
					"match": "\\b(archetype)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.archetype.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.archetype.archetype"
						}
					}
				}
			]
		},
		"declaration-variable": {
			"patterns": [
				{
					"match": "\\b(variable|constant)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.variable.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.variable.archetype"
						}
					}
				}
			]
		},
		"declaration-instance": {
			"patterns": [
				{
					"match": "\\b(instance)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))(\\s+of)\\s+(([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.instance.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"5": {
							"name": "entity.name.type.instance.archetype"
						},
						"6": {
							"name": "keyword.control.of.archetype"
						},
						"7": {
							"name": "entity.name.contract.archetype"
						}
					}
				}
			]
		},
		"declaration-enum": {
			"patterns": [
				{
					"match": "\\b(enum)(\\[\\%(.)+\\%\\])?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.enum.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.enum.archetype"
						}
					}
				}
			]
		},
		"declaration-states": {
			"patterns": [
				{
					"match": "\\b(states)(\\[\\%(.)+\\%\\])?(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.states.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.states.archetype"
						}
					}
				}
			]
		},
		"declaration-asset": {
			"patterns": [
				{
					"match": "\\b(asset)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.underline.asset.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.type.asset.archetype"
						}
					}
				},
				{
					"match": "([A-Za-z_]\\w*)\\s*(\\[\\%(.)+\\%\\])?\\s*\\:\\s*(([A-Za-z_]\\w*)|bool|int|rational|date|duration|string|address|role|mtez|key|(([A-Za-z_]\\w*)\\s+(partition|collection|subset)))(\\s*\\=\\s*([A-Za-z0-9_]\\w*)+)?;",
					"captures": {
						"1": {
							"name": "entity.other.attribute-name.field.name"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "storage.type.asset.type"
						}
					}
				}
			]
		},
		"declaration-action": {
			"patterns": [
				{
					"match": "\\b(action)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.action.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.action.archetype"
						}
					}
				}
			]
		},
		"declaration-transition": {
			"patterns": [
				{
					"match": "\\b(transition)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.transition.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.type.transition.archetype"
						}
					}
				}
			]
		},
		"declaration-contract": {
			"patterns": [
				{
					"match": "\\b(contract)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.contract.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.type.contract.archetype"
						}
					}
				}
			]
		},
		"declaration-extension": {
			"patterns": [
				{
					"match": "^%\\\\\\.$\\b"
				}
			]
		},
		"declaration-namespace": {
			"patterns": [
				{
					"match": "\\b(namespace)\\b"
				}
			]
		},
		"declaration-function": {
			"patterns": [
				{
					"match": "\\b(function)(\\[\\%(.)+\\%\\])?\\s+(([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.function.archetype"
						},
						"2": {
							"name": "markup.underline.extension.archetype"
						},
						"4": {
							"name": "entity.name.type.type.function.archetype"
						}
					}
				},
				{
					"match": "\\(([A-Za-z_]\\w*)\\s*(\\[\\%(.)+\\%\\])?\\s*\\:\\s*(\\s+([A-Za-z_]\\w*))\\)",
					"captures": {
						"1": {
							"name": "entity.name.argument.name"
						},
						"2": {
							"name": "entity.name.type.extension.archetype"
						},
						"4": {
							"name": "storage.type.argument.type"
						}
					}
				}
			]
		},
		"declaration-specification": {
			"patterns": [
				{
					"match": "\\b(specification)(\\[\\%(.)+\\%\\])?\\b",
					"name": "markup.heading.specification.archetype"
				}
			]
		},
		"declaration-security": {
			"patterns": [
				{
					"match": "\\b(security)(\\[\\%(.)+\\%\\])?\\b",
					"name": "markup.heading.security.archetype"
				}
			]
		},
		"declaration-predicate": {
			"patterns": [
				{
					"match": "\\b(predicate)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.predicate.archetype"
						},
						"3": {
							"name": "entity.name.type.predicate.archetype"
						}
					}
				}
			]
		},
		"declaration-definition": {
			"patterns": [
				{
					"match": "\\b(definition)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.definition.archetype"
						},
						"3": {
							"name": "entity.name.type.definition.archetype"
						}
					}
				}
			]
		},
		"declaration-lemma": {
			"patterns": [
				{
					"match": "\\b(lemma)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.lemma.archetype"
						},
						"3": {
							"name": "entity.name.type.lemma.archetype"
						}
					}
				}
			]
		},
		"declaration-theorem": {
			"patterns": [
				{
					"match": "\\b(theorem)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.theorem.archetype"
						},
						"3": {
							"name": "entity.name.type.theorem.archetype"
						}
					}
				}
			]
		},
		"declaration-invariant": {
			"patterns": [
				{
					"match": "\\b(invariant)\\s+(for)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.invariant.archetype"
						},
						"2": {
							"name": "storage.type.invariant.archetype"
						},
						"3": {
							"name": "entity.name.type.invariant.archetype"
						}
					}
				}
			]
		},
		"declaration-assert": {
			"patterns": [
				{
					"match": "\\b(assert)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.assert.archetype"
						},
						"3": {
							"name": "entity.name.type.assert.archetype"
						},
						"5": {
							"name": "storage.type.at.archetype"
						},
						"7": {
							"name": "entity.name.type.at.archetype"
						}
					}
				}
			]
		},
		"declaration-postcondition": {
			"patterns": [
				{
					"match": "\\b(postcondition)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.postcondition.archetype"
						},
						"3": {
							"name": "entity.name.type.postcondition.archetype"
						}
					}
				}
			]
		},
		"type": {
			"patterns": [
				{
					"include": "#type-primitive"
				}
			]
		},
		"type-primitive": {
			"patterns": [
				{
					"match": "\\b(bool|int|rational|date|duration|string|address|role|tez|key)\\b",
					"name": "storage.type.primitive.archetype"
				}
			]
		},
		"global": {
			"patterns": [
				{
					"include": "#global-variables"
				},
				{
					"include": "#global-functions"
				}
			]
		},
		"global-variables": {
			"patterns": [
				{
					"match": "\\b(the|state|now|transferred|caller|balance|requires|effects|none|any|transfer|mem|idem|before|added|removed|toiterate|iterated|after|fixed|default|type)\\b",
					"name": "variable.language.global.archetype"
				}
			]
		},
		"global-functions": {
			"patterns": [
				{
					"match": "\\b(fail)\\b",
					"name": "keyword.control.exceptions.archetype"
				},
				{
					"match": "\\b(nth|clear|select|removeif|sort|count|sum|max|min|enqueue|dequeue|push|pop|add|addifnotexist|remove|get|contains|update|mem|subsetof|head|tail)\\b",
					"name": "support.function.asset_function.archetype"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"match": "\\bmay\\s+be\\s+performed\\s+only\\s+by\\s+action\\b",
					"name": "keyword.operator.logic.specific"
				},
				{
					"match": "\\bmay\\s+be\\s+performed\\s+only\\s+by\\s+role\\b",
					"name": "keyword.operator.logic.specific"
				},
				{
					"match": "\\bmay\\s+be\\s+performed\\s+by\\s+action\\b",
					"name": "keyword.operator.logic.specific"
				},
				{
					"match": "\\bmay\\s+be\\s+performed\\s+by\\s+role\\b",
					"name": "keyword.operator.logic.specific"
				},
				{
					"match": "\\b(only_by_role|only_in_action|only_by_role_in_action|not_by_role|not_in_action|not_by_role_in_action|transferred_by|transferred_to|no_storage_fail)\\b",
					"name": "keyword.control.security.archetype"
				},
				{
					"match": "\\b(anyaction|noaction|anychange|nochange)\\b",
					"name": "constant.language.security.archetype"
				},
				{
					"match": "(and|or|not|\\->)",
					"name": "keyword.operator.logic.archetype"
				},
				{
					"match": "(=|<>|>=|>|<|<=)",
					"name": "keyword.operator.comparison.archetype"
				},
				{
					"match": "(\\+|\\-|\\*|\\/|\\%)",
					"name": "keyword.operator.arithmetic.archetype"
				},
				{
					"match": "(forall|exists)(\\s+([A-Za-z_]\\w*))",
					"captures": {
						"1": {
							"name": "keyword.control.quantifier.archetype"
						},
						"2": {
							"name": "entity.name.id_quantifier.archetype"
						}
					}
				},
				{
					"match": "(\\:=|\\+=|\\-=|\\*=|\\/=|\\&=|\\|=)",
					"name": "keyword.operator.assignment.archetype"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"match": ";",
					"name": "punctuation.separator.archetype"
				}
			]
		},
		"description": {
			"patterns": [
				{
					"match": "\\b(from)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.from.archetype"
						},
						"3": {
							"name": "entity.name.from.archetype"
						}
					}
				},
				{
					"match": "\\b(to)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.to.archetype"
						},
						"3": {
							"name": "entity.name.to.archetype"
						}
					}
				},
				{
					"match": "\\b(at)\\b",
					"name": "markup.heading.at.archetype"
				},
				{
					"match": "\\b(on)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "markup.heading.on.archetype"
						},
						"3": {
							"name": "entity.name.on.archetype"
						}
					}
				},
				{
					"match": "\\b(identified(\\s+)by)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.identifiedby.archetype"
						},
						"2": {
							"name": "entity.name.id.archetype"
						}
					}
				},
				{
					"match": "\\b(sorted(\\s+)by)(\\s+([A-Za-z_]\\w*))\\b",
					"captures": {
						"1": {
							"name": "keyword.control.sortedby.archetype"
						},
						"2": {
							"name": "entity.name.id.archetype"
						}
					}
				},
				{
					"match": "\\b(with\\s+)?(effect)\\b",
					"name": "markup.heading.effect.archetype"
				},
				{
					"match": "((called)(\\s*)(by))\\s*(\\[\\%\\w+\\%\\])?",
					"captures": {
						"1": {
							"name": "markup.heading.calledby.archetype"
						},
						"5": {
							"name": "markup.underline.extension.archetype"
						}
					}
				},
				{
					"match": "(accept)(\\s+)(transfer)",
					"name": "markup.heading.accepttransfer.archetype"
				},
				{
					"match": "(refuse)(\\s+)(transfer)",
					"name": "markup.heading.refusetransfer.archetype"
				},
				{
					"match": "\\b(when)\\b",
					"captures": {
						"1": {
							"name": "markup.heading.when.archetype"
						}
					}
				},
				{
					"match": "(require)\\s+\\{",
					"captures": {
						"1": {
							"name": "markup.heading.require.archetype"
						}
					}
				},
				{
					"match": "(failif)\\s+\\{",
					"captures": {
						"1": {
							"name": "markup.heading.failif.archetype"
						}
					}
				},
				{
					"match": "\\b(assert)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "markup.heading.assert.archetype"
						},
						"3": {
							"name": "entity.name.type.assert.archetype"
						}
					}
				},
				{
					"match": "\\b(initialized(\\s+)by)\\b",
					"name": "markup.heading.initializedby.archetype"
				},
				{
					"match": "\\b(with(\\s+)states)\\b",
					"name": "markup.heading.withstates.archetype"
				},
				{
					"match": "\\b(with)\\b",
					"name": "markup.heading.with.archetype"
				},
				{
					"match": "\\b(initial)\\b",
					"name": "keyword.control.initial.archetype"
				}
			]
		},
		"control": {
			"patterns": [
				{
					"match": "\\b(let)(\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.let.archetype"
						},
						"3": {
							"name": "variable.other.definition.archetype"
						}
					}
				},
				{
					"match": "\\b(match)(.)+(with)\\b",
					"captures": {
						"1": {
							"name": "keyword.control.match.archetype"
						},
						"3": {
							"name": "keyword.control.with.archetype"
						}
					}
				},
				{
					"match": "\\b(for)(\\s+\\:\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.for.archetype"
						},
						"2": {
							"name": "entity.name.type.for_label.archetype"
						}
					}
				},
				{
					"match": "\\b(iter)(\\s+\\:\\s+([A-Za-z_]\\w*))?\\b",
					"captures": {
						"1": {
							"name": "keyword.control.iter.archetype"
						},
						"2": {
							"name": "entity.name.type.iter_label.archetype"
						}
					}
				},
				{
					"match": "(([A-Za-z0-9_]\\w*)\\s*\\:\\s+)",
					"name": "entity.name.type.label.archetype"
				},
				{
					"match": "\\b(if|then|else|in|break|otherwise|transfer|require|failif|to|from|end|return?)\\b",
					"name": "keyword.control.flow.archetype"
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"name": "string.quoted.double.archetype",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.archetype",
							"match": "\\\\."
						}
					]
				},
				{
					"match": "\\b(\\d+ div \\d+)\\b",
					"name": "constant.numeric.rational.archetype"
				},
				{
					"match": "\\b(\\d+(\\.\\d+)?tz)\\b",
					"name": "constant.language.currency.tz.archetype"
				},
				{
					"match": "\\b(\\d+(\\.\\d+)?mtz)\\b",
					"name": "constant.language.currency.mtz.archetype"
				},
				{
					"match": "\\b(\\d+\\.\\d+)\\b",
					"name": "constant.numeric.rational.decimal.archetype"
				},
				{
					"match": "\\b\\d+d\\b",
					"name": "constant.language.duration.archetype"
				},
				{
					"match": "@(\\w+)",
					"name": "constant.language.address.archetype"
				},
				{
					"match": "\\b([\\+-]?\\d{4}(?!\\d{2}\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?\\b",
					"name": "constant.language.date.archetype"
				},
				{
					"match": "\\b\\d+\\b",
					"name": "constant.numeric.number.archetype"
				},
				{
					"match": "\\b(true|false)\\b",
					"name": "constant.language.bool.archetype"
				}
			]
		}
	},
	"scopeName": "source.archetype"
}